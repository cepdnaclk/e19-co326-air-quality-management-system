worker_processes auto;

events {
  worker_connections 1024;
}

http {
  charset utf-8;
  default_type application/json;
  include mime.types;
  server_tokens off;

  # timeouts are configured slightly higher than gateway read-timeout of 60 seconds
  proxy_connect_timeout 70; # seconds, default: 60
  proxy_send_timeout 70; # seconds, default: 60
  proxy_read_timeout 70; # seconds, default: 60
  send_timeout 70; # seconds, default: 60

  client_header_buffer_size 8k; # allow longer URIs + headers (default: 1k)
  large_client_header_buffers 4 16k;

  merge_slashes off; # allow multiple slashes

  map $http_authorization $authentication {
    default "Authentication required";
    "~Bearer" "off";
    # the above means: if we get a request containing an "Authorization: Bearer ..." header, set "off" to $authentication
  }

  map $http_authorization $nginx_auth_user {
    default "nginx:${remote_user}";
    "~Bearer" "";
  }

  map $http_accept $ld_suffix {
    default                 ".html";
    "~application/html"     ".html";
    "~application/ld\+json" ".jsonld";
    "~text/turtle"          ".ttl";
    "~application/rdf\+xml" ".rdf";
  }

  server {
    listen         80;
    listen         [::]:80;
    server_name    ditto.eclipseprojects.io;

    # required for let's encrypt:
    location ^~ /.well-known/acme-challenge {
      default_type text/plain;
      allow all;
    }

    location / {  # the default location redirects to https
      return       301 https://$server_name$request_uri;
    }

    # api - also accessible via plain HTTP for health check
    location /status {
      include nginx-cors.conf;

      proxy_pass                    http://gateway:8080;
      proxy_http_version            1.1;
      proxy_set_header              Host                      $http_host;
      proxy_set_header              X-Real-IP                 $remote_addr;
      proxy_set_header              X-Forwarded-For           $proxy_add_x_forwarded_for;

      proxy_set_header Connection  '';
      chunked_transfer_encoding    off;
      proxy_buffering              off;
      proxy_cache                  off;
    }

    # api - also accessible via plain HTTP (in order to connect from "weak IoT devices")
    location /api {
      include nginx-cors.conf;

      auth_basic                    $authentication;
      auth_basic_user_file          nginx.htpasswd;

      proxy_pass                    http://gateway:8080;
      proxy_http_version            1.1;
      proxy_set_header              Host                      $http_host;
      proxy_set_header              X-Real-IP                 $remote_addr;
      proxy_set_header              X-Forwarded-For           $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User          $remote_user;
      proxy_set_header              x-ditto-pre-authenticated $nginx_auth_user;

      proxy_set_header Connection  '';
      chunked_transfer_encoding    off;
      proxy_buffering              off;
      proxy_cache                  off;
    }

    # ws - also accessible via plain HTTP (in order to connect from "weak IoT devices")
    location /ws {
      auth_basic                    $authentication;
      auth_basic_user_file          nginx.htpasswd;

      proxy_pass                    http://gateway:8080;
      proxy_http_version            1.1;
      proxy_set_header              Host                      $http_host;
      proxy_set_header              X-Real-IP                 $remote_addr;
      proxy_set_header              X-Forwarded-For           $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User          $remote_user;
      proxy_set_header              x-ditto-pre-authenticated $nginx_auth_user;

      proxy_set_header              Upgrade             $http_upgrade;
      proxy_set_header              Connection          "upgrade";
      proxy_read_timeout            1d;
      proxy_send_timeout            1d;
    }

    # wot - also accessible via plain HTTP
    location /wot {
      try_files $uri $uri$ld_suffix =404;
    }
  }

  server {
    listen 443 default_server ssl;
    listen [::]:443 ssl;
    server_name ditto.eclipseprojects.io;

    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/ditto.eclipseprojects.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ditto.eclipseprojects.io/privkey.pem;

    ssl_buffer_size 8k;

    ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    ssl_ecdh_curve secp384r1;
    ssl_session_tickets off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8;

    # security relevant headers:
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains;";
    add_header Content-Security-Policy "default-src 'self' 'sha256-VBHeOpIX6yWZ0JTnxdN0srjOFLQ8dvcOukHhkEkUTTM=' 'sha256-mfFV0ZbsBS2DlOgYHoR09y92EObpSr85vW6YB9VUvTw=' 'sha256-vD02WTkLq/Mc1Rwiyb2Si246qnnZQmls4LqjlSG4ufU=' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com; img-src 'self' data: https://raw.githubusercontent.com; worker-src 'self' blob:; connect-src 'self' localhost;" always;
    expires 1s;
    add_header Cache-Control "no-cache";
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options "SAMEORIGIN";

    # required for let's encrypt:
    location ^~ /.well-known/acme-challenge {
      default_type text/plain;
      allow all;
    }

    location / {
      index index.html;
    }

    # connections api using devops user configured in Ditto
    location /api/2/connections {
      include nginx-cors.conf;

      proxy_pass                    http://gateway:8080;
      proxy_http_version            1.1;
      proxy_set_header              Host                $http_host;
      proxy_set_header              X-Real-IP           $remote_addr;
      proxy_set_header              X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User    $remote_user;

      proxy_set_header Connection  '';
      chunked_transfer_encoding    off;
      proxy_buffering              off;
      proxy_cache                  off;
    }

    # api
    location /api {
      include nginx-cors.conf;

      auth_basic                    $authentication;
      auth_basic_user_file          nginx.htpasswd;

      proxy_pass                    http://gateway:8080;
      proxy_http_version            1.1;
      proxy_set_header              Host                      $http_host;
      proxy_set_header              X-Real-IP                 $remote_addr;
      proxy_set_header              X-Forwarded-For           $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User          $remote_user;
      proxy_set_header              x-ditto-pre-authenticated $nginx_auth_user;

      proxy_set_header Connection  '';
      chunked_transfer_encoding    off;
      proxy_buffering              off;
      proxy_cache                  off;
    }

    # ws
    location /ws {
      auth_basic                    $authentication;
      auth_basic_user_file          nginx.htpasswd;

      proxy_pass                    http://gateway:8080;
      proxy_http_version            1.1;
      proxy_set_header              Host                      $http_host;
      proxy_set_header              X-Real-IP                 $remote_addr;
      proxy_set_header              X-Forwarded-For           $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User          $remote_user;
      proxy_set_header              x-ditto-pre-authenticated $nginx_auth_user;

      proxy_set_header              Upgrade             $http_upgrade;
      proxy_set_header              Connection          "upgrade";
      proxy_read_timeout            1d;
      proxy_send_timeout            1d;
    }

    # wot
    location /wot {
      try_files $uri $uri$ld_suffix =404;
    }

    # status
    location /status {
      include nginx-cors.conf;

      proxy_pass                    http://gateway:8080/overall/status;
      proxy_http_version            1.1;
      proxy_set_header              Host                $http_host;
      proxy_set_header              X-Real-IP           $remote_addr;
      proxy_set_header              X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User    $remote_user;
    }

    # stats
    location /stats {
      include nginx-cors.conf;

      proxy_pass                    http://gateway:8080;
      proxy_http_version            1.1;
      proxy_set_header              Host                $http_host;
      proxy_set_header              X-Real-IP           $remote_addr;
      proxy_set_header              X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User    $remote_user;
    }

    # devops
    location /devops {
      include nginx-cors.conf;

      proxy_pass                    http://gateway:8080;
      proxy_http_version            1.1;
      proxy_set_header              Host                $http_host;
      proxy_set_header              X-Real-IP           $remote_addr;
      proxy_set_header              X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User    $remote_user;
    }

    # ui
    location /ui/ {
      proxy_pass                    http://ditto-ui:8080/;
      proxy_http_version            1.1;
      proxy_set_header              Host                $http_host;
    }

    # swagger
    location /apidoc/ {
      proxy_pass                    http://swagger-ui:8080/;
      proxy_http_version            1.1;
      proxy_set_header              Host                $http_host;
    }

#    location /nodered {
#      proxy_pass http://node-red:1880/nodered;
#      proxy_http_version 1.1;
#      proxy_set_header   Host $host;
#      proxy_set_header Upgrade $http_upgrade;
#      proxy_set_header Connection 'upgrade';
#      proxy_set_header Host $host;
#      proxy_cache_bypass $http_upgrade;
#    }

    location /oauth2/google/token {
      # set $args '';
      proxy_set_body $request_body&client_secret=TODOinsertOauth2clientSecret;
      # Google DNS:
      resolver 8.8.8.8;
      resolver_timeout 5s;
      set $google_token_uri "https://www.googleapis.com/oauth2/v4/token";
      proxy_pass $google_token_uri;
      proxy_ssl_session_reuse off;
      proxy_set_header Host            "www.googleapis.com";
      proxy_set_header X-Forwarded-For "www.googleapis.com";
    }
  }
}
